generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NotificationType {
  ORDER_UPDATE
  STOCK_ALERT
  PROMOTION
  SYSTEM
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  name          String
  phone         String?
  role          UserRole  @default(CUSTOMER)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addresses     UserAddress[]
  orders        Order[]
  cartItems     CartItem[]
  favorites     Favorite[]
  reviews       ProductReview[]
  notifications Notification[]
  blogPosts     BlogPost[]

  // NextAuth
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserAddress {
  id           String  @id @default(cuid())
  userId       String
  title        String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String
  country      String
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model Category {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String?
  parentId        String?
  imageUrl        String?
  metaTitle       String?
  metaDescription String?
  isActive        Boolean   @default(true)
  sortOrder       Int       @default(0)
  createdAt       DateTime  @default(now())

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id                String        @id @default(cuid())
  name              String
  slug              String        @unique
  description       String?
  shortDescription  String?
  sku               String        @unique
  price             Decimal       @db.Decimal(10, 2)
  comparePrice      Decimal?      @db.Decimal(10, 2)
  costPrice         Decimal?      @db.Decimal(10, 2)
  trackInventory    Boolean       @default(true)
  inventoryQuantity Int           @default(0)
  weight            Decimal?      @db.Decimal(8, 2)
  categoryId        String
  brand             String?
  status            ProductStatus @default(DRAFT)
  featured          Boolean       @default(false)
  metaTitle         String?
  metaDescription   String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  category     Category        @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  variants     ProductVariant[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  favorites    Favorite[]
  reviews      ProductReview[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id                String   @id @default(cuid())
  productId         String
  name              String
  sku               String   @unique
  price             Decimal? @db.Decimal(10, 2)
  inventoryQuantity Int      @default(0)
  option1Name       String?
  option1Value      String?
  option2Name       String?
  option2Value      String?
  option3Name       String?
  option3Value      String?
  createdAt         DateTime @default(now())

  // Relations
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  productId String
  variantId String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String?
  email           String
  status          OrderStatus   @default(PENDING)
  subtotal        Decimal       @db.Decimal(10, 2)
  taxAmount       Decimal       @default(0) @db.Decimal(10, 2)
  shippingAmount  Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount  Decimal       @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal       @db.Decimal(10, 2)
  currency        String        @default("TRY")
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  shippingAddress Json
  billingAddress  Json
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user  User?       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  variantId   String?
  productName String
  variantName String?
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  // Relations
  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Discount {
  id            String       @id @default(cuid())
  code          String       @unique
  type          DiscountType
  value         Decimal      @db.Decimal(10, 2)
  minimumAmount Decimal?     @db.Decimal(10, 2)
  usageLimit    Int?
  usedCount     Int          @default(0)
  startsAt      DateTime?
  endsAt        DateTime?
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())

  @@map("discounts")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model BlogPost {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  content         String
  excerpt         String?
  featuredImage   String?
  authorId        String
  category        String?
  tags            String[]
  status          PostStatus @default(DRAFT)
  metaTitle       String?
  metaDescription String?
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id])

  @@map("blog_posts")
}

model ProductReview {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  orderId    String?
  rating     Int
  title      String?
  content    String?
  isVerified Boolean  @default(false)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}